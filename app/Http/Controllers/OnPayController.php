<?php

namespace App\Http\Controllers;

use App\Http\Requests\OnPayRequest;
use App\Models\DomainOrder;
use http\Env\Response;
use Illuminate\Http\Request;

class OnPayController extends Controller
{

    public static $merchant_login = '';
    public static $linkPaySystem = 'http://secure.onpay.ru/pay/';
    public static $apiSecretKey = 'CEcLNBkdmQt';


    static function toFloat($sum): string
    {
//        $sum = floatval($sum);
//
//        if (strpos($sum, ".") != false) {
//            $sum = round($sum, 2);
//        } else {
//            $sum = $sum . '.0';
//        }
//        return $sum;
        return !strpos($sum, '.') ? $sum . '.0' : round($sum, 2);
    }

    /**
     * создание секретной подписи при приёме платежа
     * @param Request $request
     * @return void
     */
    static function signatureForPay(int $pay_for, bool $status): string
    {
        return sha1(implode(';', [
            'pay',
            $status ? 'true' : 'false',
            $pay_for,
            self::$apiSecretKey
        ]));
    }

    /**
     * проверка подписи от онпая когда приходит запрос "оплачено"
     **/
    static function signatureFromApiThenPay(Request $request): bool
    {
        $r0 = implode(';', [
//                «pay;pay_for;payment.amount;payment.way;balance.amount;balance.way;secret_key»
            $request->type,
            intval($request->pay_for),

            self::toFloat($request['payment']['amount']),
            trim($request->payment['way']),

            self::toFloat($request['balance']['amount']),
            trim($request->balance['way']),

            self::$apiSecretKey
        ]);
        $r = sha1($r0);

        return $request->signature === $r;
    }

    public function apiCall(Request $request)
    {

        $lines = '';

        TelegramController::$token_telega = '776541435:AAH6efi0QRgzmifygi5bqih2m34XNjf8_As';
//        TelegramController::sendMsg(360209578,'asdasd');
//        TelegramController::sendMsg(360209578, PHP_EOL . PHP_EOL . PHP_EOL . 'старт платежа/проверки' . PHP_EOL . json_encode($request->all()));

        $out = [
            "pay_for" => $request->pay_for,
        ];

        // если pay
        if ($request->type == 'pay') {

            if (!self::signatureFromApiThenPay($request)) {
                $out['status'] = false;
            } else {

                try {
                    $res = DomainOrder::with(['price'])->whereId($request->pay_for)->firstOrFail();

                    if ($res->price->amount <= $request->balance['amount'] &&
                        $res->price->valute == $request->balance['way']) {
                        TelegramController::send('платёж гут');
                        $out['status'] = true;
                    } else {
                        TelegramController::send('платёж НЕ гут');
                        $out['status'] = false;
                    }

                } catch (\Exception $ex) {
                    TelegramController::send('заказа с ценой не найдено' . json_encode($ex->getMessage()));
                }
            }

            $out['pay_for'] = $request->pay_for;
            //signature 	string 	Контрольная подпись, SHA1 от строки - «pay;status;pay_for;secret_key»
            $out['signature'] = self::signatureForPay($request->pay_for, $out['status']);

            //receipt 	json 	Содержит информацию о списке покупок в чеке
            //receipt.items 	array 	Список товаров в чеке
            //receipt.items.name 	string 	Название товара
            //receipt.items.price 	float 	Цена за единицу товара
            //receipt.items.quantity 	float 	Количество
            $out['receipt']['items'][] = [
                'name' => 'Услуги по наблюдению заз освобождениеем домена',
                'price' => 500,
                'quantity' => 10
            ];
            $out['receipt']['items'][] = [
                'name' => 'Услуги по наблюдению заз освобождениеем домена',
                'price' => 500,
                'quantity' => 10
            ];
            //receipt.sum 	float 	Сумма чека
            $out['receipt']['sum'] = 300;

            TelegramController::send(json_encode($out));

        } // если check
        else {

            $check_md5 = self::checkMd5($request);
            TelegramController::sendMsg(360209578, 'md5 check: ' . ($check_md5 ? 'true' : 'false'));

            if (self::checkMd5($request)) {

                $lines .= '/' . __LINE__;
                $out['md5_check'] = true;

                try {

                    $res = DomainOrder::with('price')->whereId($request->pay_for)->firstOrFail();

                    $result = true;

                    if ($res->price->amount != $request->amount) {
                        $lines .= '/' . __LINE__;
                        $result = false;
                    }

                    $err = '';
                } catch (\Exception $ex) {
                    $lines .= '/' . __LINE__;
                    $err = $ex;
//            dd($ex);
                    $result = false;
                }

            } // no check md5
            else {
                $lines .= '/' . __LINE__;
                $out['md5_check'] =
                $result = false;
            }

            $out["status"] = $result;

            $check = [
                $request->type,
                $result ? 'true' : 'false',
                (int)$request->pay_for,
                self::$apiSecretKey
            ];
            $signature_string = implode(";", $check);
            $out['signature'] = sha1($signature_string);

        }

        return response()->json($out);

    }

    static function checkMd5(Request $request): bool
    {

        $tomd5 = [
            $request->type,
            $request->pay_for,
            $request->amount,
            $request->way,
            $request->mode,
            self::$apiSecretKey
        ];

        $sha = sha1(implode(';', $tomd5));
        $ee = ($request->signature == $sha) ? true : false;

        return $ee;
    }

    public static function creatLink($in)
    {
        $link = self::$linkPaySystem . self::$merchant_login . '?' . http_build_query($in);
        return $link;
    }

    public function createPayLink($in)
    {

        //pay_mode 	«free» или «fix» 	Режим платежа. free – пользователь сможет менять сумму платежа в платежной форме, fix – пользователю будет показана сумма к зачислению (т.е. за вычетом всех комиссий) без возможности её редактирования. Обязательно указать сумму платежа price и назначение pay_for
        //price 	Дробное число, до 2-х знаков после запятой. 	Сумма платежа. Внимание! При формировании контрольной подписи число содержит не менее 1-го знака после запятой. Т.е. «100» в подписи будет «100.0», а не «100». Внимание! Все суммы в платежках и платежах округляются вниз до 2-ух знаков после запятой. Т.е., число «100.1155» будет округлено до «100.11».
        //ticker 	3-х символьное наименование валюты (по умолчанию RUR) 	Основная валюта ценника.
        //pay_for 	String (100max) (Для «прямых» платежей можно использовать только цифры!) 	Номер заказа, заявки, аккаунт пользователя и т.п. для идентификации платежа в системе магазина.
        //md5 	string(32) 	Подпись параметров ссылки, для защиты от изменений пользователем. Принцип формирования см. ниже.
        //convert 	«yes» или «no» (по умолчанию «yes») 	Принудительная конвертация платежей в валюту ценника. Если включена – все поступающие платежи будут конвертироваться в валюту ценника. Т.е. если в ссылке установлена стоимость 100RUR, а клиент оплатил с помощью USD – вы получите на счет 100RUR. Если выключена, вы получите ту валюту, которой платит клиент. Т.е. например, пользователь платит 3.5WMZ за ваш товар стоимостью 100RUR – вы получите 3.5WMZ на свой WMZ счет в системе Onpay (при этом уведомление по API будет содержать 100RUR). ВНИМАНИЕ! Если оплата поступает из НЕбалансовой системы(система, не имеющая собственного баланса, пример - OSP), то конвертация будет происходить в валюту ценника.
        //url_success 	http:* / https:* (255max) 	Ссылка, на которую будет переадресован пользователь после успешного завершения платежа. Внимание! Не может содержать параметры запроса (все, что идет после «?» в ссылке). Если Вам нужны параметры после «?» в ссылке используйте url_success_enc.
        //url_success_enc 	http:* / https:* (255max) 	Необязательный параметр, содержащий ссылку для перехода в случае успешного платежа, закодированную в base64. Параметр url_success_enc имеет приоритет над параметром url_success в том смысле, что если в ссылке будут присутствовать оба параметра, параметр url_success будет проигнорирован. Если в ссылке присутствует только параметр url_success, а параметра url_success_enc - нет, то будет использован параметр url_success, но по техническим причинам он будет обрезан справа начиная с первого встретившегося символа '&'.
        //url_fail 	http:* / https:* (255max) 	Ссылка, на которую будет переадресован пользователь после неудачного завершения платежа. Внимание! Не может содержать параметры запроса (все, что идет после «?» в ссылке). Если Вам нужны параметры после «?» в ссылке используйте url_fail_enc.
        //url_fail_enc 	http:* / https:* (255max) 	Необязательный параметр, содержащий ссылку для перехода в случае неудачного или отмененного платежа, закодированную в base64. Параметр url_fail_enc имеет приоритет над параметром url_fail в том смысле, что если в ссылке будут присутствовать оба параметра, параметр url_fail будет проигнорирован. Если в ссылке присутствует только параметр url_fail, а параметра url_fail_enc - нет, то будет использован параметр url_fail, но по техническим причинам он будет обрезан справа начиная с первого встретившегося символа '&'.
        //user_email 	String (40max) 	E-mail плательщика
        //user_phone 	String (40max) 	Телефон плательщика
        //note 	String (255max) 	Заметка. В этом параметре можно передать любой комментарий, который будет передан через API вашему сайту при поступлении платежа (в запросе типа PAY)
        //ln 	«en» или «ru»(по умолчанию «ru») 	Язык отображения платежной формы
        //f 	7, 8, 9, 10, 11 	Вариант дизайна платежной формы
        //one_way 	3-х символьное наименование валюты 	Формы оплаты одним способом (выбрана валюта и сумма платежа, для ввода доступен только e-mail пользователя) Для использования форм с выбранной платежной системой в ссылку необходимо передать параметры: one_way - валюта, отличная от RUR, pay_mode - «fix», pay_for - номер заказа, price - цена, ticker - RUR
        //price_final 	«true» 	Комиссию платежной системы взымать с продавца. К стоимости заказа не будет прибавляться комиссия платежной системы на ввод. Если параметр не указан, или в нем передано значение отличное от «true», то комиссия будет взыматься с плательщика
        //onpay_ap_xxx 	string 	Дополнительные параметры

        $validated = $in->validate([
            //pay_mode 	«free» или «fix» 	Режим платежа. free – пользователь сможет менять сумму платежа в платежной форме, fix – пользователю будет показана сумма к зачислению (т.е. за вычетом всех комиссий) без возможности её редактирования. Обязательно указать сумму платежа price и назначение pay_for
            'pay_mode' => 'in:free,fix',
            //price 	Дробное число, до 2-х знаков после запятой. 	Сумма платежа. Внимание! При формировании контрольной подписи число содержит не менее 1-го знака после запятой. Т.е. «100» в подписи будет «100.0», а не «100». Внимание! Все суммы в платежках и платежах округляются вниз до 2-ух знаков после запятой. Т.е., число «100.1155» будет округлено до «100.11».
            'price' => 'required|numeric',
            //ticker 	3-х символьное наименование валюты (по умолчанию RUR) 	Основная валюта ценника.
            'ticker' => 'string|max:3',
            //pay_for 	String (100max) (Для «прямых» платежей можно использовать только цифры!) 	Номер заказа, заявки, аккаунт пользователя и т.п. для идентификации платежа в системе магазина.
            'pay_for' => 'required|integer|max:100',
            //md5 	string(32) 	Подпись параметров ссылки, для защиты от изменений пользователем. Принцип формирования см. ниже.
            'md5' => 'max:32',
            //convert 	«yes» или «no» (по умолчанию «yes») 	Принудительная конвертация платежей в валюту ценника. Если включена – все поступающие платежи будут конвертироваться в валюту ценника. Т.е. если в ссылке установлена стоимость 100RUR, а клиент оплатил с помощью USD – вы получите на счет 100RUR. Если выключена, вы получите ту валюту, которой платит клиент. Т.е. например, пользователь платит 3.5WMZ за ваш товар стоимостью 100RUR – вы получите 3.5WMZ на свой WMZ счет в системе Onpay (при этом уведомление по API будет содержать 100RUR). ВНИМАНИЕ! Если оплата поступает из НЕбалансовой системы(система, не имеющая собственного баланса, пример - OSP), то конвертация будет происходить в валюту ценника.
            'convert' => 'in:yes,no',
            //url_success 	http:* / https:* (255max) 	Ссылка, на которую будет переадресован пользователь после успешного завершения платежа. Внимание! Не может содержать параметры запроса (все, что идет после «?» в ссылке). Если Вам нужны параметры после «?» в ссылке используйте url_success_enc.
            'url_success' => 'max:255',
            //url_success_enc 	http:* / https:* (255max) 	Необязательный параметр, содержащий ссылку для перехода в случае успешного платежа, закодированную в base64. Параметр url_success_enc имеет приоритет над параметром url_success в том смысле, что если в ссылке будут присутствовать оба параметра, параметр url_success будет проигнорирован. Если в ссылке присутствует только параметр url_success, а параметра url_success_enc - нет, то будет использован параметр url_success, но по техническим причинам он будет обрезан справа начиная с первого встретившегося символа '&'.
            'url_success_enc' => 'max:255',
            //url_fail 	http:* / https:* (255max) 	Ссылка, на которую будет переадресован пользователь после неудачного завершения платежа. Внимание! Не может содержать параметры запроса (все, что идет после «?» в ссылке). Если Вам нужны параметры после «?» в ссылке используйте url_fail_enc.
            'url_fail' => 'max:255',
            //url_fail_enc 	http:* / https:* (255max) 	Необязательный параметр, содержащий ссылку для перехода в случае неудачного или отмененного платежа, закодированную в base64. Параметр url_fail_enc имеет приоритет над параметром url_fail в том смысле, что если в ссылке будут присутствовать оба параметра, параметр url_fail будет проигнорирован. Если в ссылке присутствует только параметр url_fail, а параметра url_fail_enc - нет, то будет использован параметр url_fail, но по техническим причинам он будет обрезан справа начиная с первого встретившегося символа '&'.
            'url_fail_enc' => 'max:255',
            //user_email 	String (40max) 	E-mail плательщика
            'user_email' => 'max:40',
            //user_phone 	String (40max) 	Телефон плательщика
            'user_phone' => 'max:40',
            //note 	String (255max) 	Заметка. В этом параметре можно передать любой комментарий, который будет передан через API вашему сайту при поступлении платежа (в запросе типа PAY)
            'note' => 'max:255',
            //ln 	«en» или «ru»(по умолчанию «ru») 	Язык отображения платежной формы
            'ln' => 'in:en,ru',
            //f 	7, 8, 9, 10, 11 	Вариант дизайна платежной формы
            'f' => '',
            //one_way 	3-х символьное наименование валюты 	Формы оплаты одним способом (выбрана валюта и сумма платежа, для ввода доступен только e-mail пользователя) Для использования форм с выбранной платежной системой в ссылку необходимо передать параметры: one_way - валюта, отличная от RUR, pay_mode - «fix», pay_for - номер заказа, price - цена, ticker - RUR
            'one_way' => 'max:3',
            //price_final 	«true» 	Комиссию платежной системы взымать с продавца. К стоимости заказа не будет прибавляться комиссия платежной системы на ввод. Если параметр не указан, или в нем передано значение отличное от «true», то комиссия будет взыматься с плательщика
            'price_final' => 'in:true,false',
            //onpay_ap_xxx 	string 	Дополнительные параметры
            'onpay_ap_xxx' => '',
        ]);

//        dd($validated);

        //pay_mode 	«free» или «fix» 	Режим платежа. free – пользователь сможет менять сумму платежа в платежной форме, fix – пользователю будет показана сумма к зачислению (т.е. за вычетом всех комиссий) без возможности её редактирования. Обязательно указать сумму платежа price и назначение pay_for
        if (isset($in['pay_mode']) && $in['pay_mode'] == 'free') {
        } else {
            $in['pay_mode'] == 'fix';
        }

        //price 	Дробное число, до 2-х знаков после запятой. 	Сумма платежа. Внимание! При формировании контрольной подписи число содержит не менее 1-го знака после запятой. Т.е. «100» в подписи будет «100.0», а не «100». Внимание! Все суммы в платежках и платежах округляются вниз до 2-ух знаков после запятой. Т.е., число «100.1155» будет округлено до «100.11».
        //ticker 	3-х символьное наименование валюты (по умолчанию RUR) 	Основная валюта ценника.
        //pay_for 	String (100max) (Для «прямых» платежей можно использовать только цифры!) 	Номер заказа, заявки, аккаунт пользователя и т.п. для идентификации платежа в системе магазина.
        //md5 	string(32) 	Подпись параметров ссылки, для защиты от изменений пользователем. Принцип формирования см. ниже.
        //convert 	«yes» или «no» (по умолчанию «yes») 	Принудительная конвертация платежей в валюту ценника. Если включена – все поступающие платежи будут конвертироваться в валюту ценника. Т.е. если в ссылке установлена стоимость 100RUR, а клиент оплатил с помощью USD – вы получите на счет 100RUR. Если выключена, вы получите ту валюту, которой платит клиент. Т.е. например, пользователь платит 3.5WMZ за ваш товар стоимостью 100RUR – вы получите 3.5WMZ на свой WMZ счет в системе Onpay (при этом уведомление по API будет содержать 100RUR). ВНИМАНИЕ! Если оплата поступает из НЕбалансовой системы(система, не имеющая собственного баланса, пример - OSP), то конвертация будет происходить в валюту ценника.
        //url_success 	http:* / https:* (255max) 	Ссылка, на которую будет переадресован пользователь после успешного завершения платежа. Внимание! Не может содержать параметры запроса (все, что идет после «?» в ссылке). Если Вам нужны параметры после «?» в ссылке используйте url_success_enc.
        //url_success_enc 	http:* / https:* (255max) 	Необязательный параметр, содержащий ссылку для перехода в случае успешного платежа, закодированную в base64. Параметр url_success_enc имеет приоритет над параметром url_success в том смысле, что если в ссылке будут присутствовать оба параметра, параметр url_success будет проигнорирован. Если в ссылке присутствует только параметр url_success, а параметра url_success_enc - нет, то будет использован параметр url_success, но по техническим причинам он будет обрезан справа начиная с первого встретившегося символа '&'.
        //url_fail 	http:* / https:* (255max) 	Ссылка, на которую будет переадресован пользователь после неудачного завершения платежа. Внимание! Не может содержать параметры запроса (все, что идет после «?» в ссылке). Если Вам нужны параметры после «?» в ссылке используйте url_fail_enc.
        //url_fail_enc 	http:* / https:* (255max) 	Необязательный параметр, содержащий ссылку для перехода в случае неудачного или отмененного платежа, закодированную в base64. Параметр url_fail_enc имеет приоритет над параметром url_fail в том смысле, что если в ссылке будут присутствовать оба параметра, параметр url_fail будет проигнорирован. Если в ссылке присутствует только параметр url_fail, а параметра url_fail_enc - нет, то будет использован параметр url_fail, но по техническим причинам он будет обрезан справа начиная с первого встретившегося символа '&'.
        //user_email 	String (40max) 	E-mail плательщика
        //user_phone 	String (40max) 	Телефон плательщика
        //note 	String (255max) 	Заметка. В этом параметре можно передать любой комментарий, который будет передан через API вашему сайту при поступлении платежа (в запросе типа PAY)
        //ln 	«en» или «ru»(по умолчанию «ru») 	Язык отображения платежной формы
        //f 	7, 8, 9, 10, 11 	Вариант дизайна платежной формы
        //one_way 	3-х символьное наименование валюты 	Формы оплаты одним способом (выбрана валюта и сумма платежа, для ввода доступен только e-mail пользователя) Для использования форм с выбранной платежной системой в ссылку необходимо передать параметры: one_way - валюта, отличная от RUR, pay_mode - «fix», pay_for - номер заказа, price - цена, ticker - RUR
        //price_final 	«true» 	Комиссию платежной системы взымать с продавца. К стоимости заказа не будет прибавляться комиссия платежной системы на ввод. Если параметр не указан, или в нем передано значение отличное от «true», то комиссия будет взыматься с плательщика
        //onpay_ap_xxx 	string 	Дополнительные параметры


    }

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
}

